{{ $thisCmd := 8 }}
{{ $extractCmd := 4 }}

{{/* going to need to update message ID after broadcast */}}
{{/* first get the embed pieces by calling embedExtract*/}}

{{ if not .ExecData }}
    {{$args := parseArgs 3 "Syntax is <channel mention> <message ID> <broadcast channel mention>"
        (carg "channel" "channel message is in")
        (carg "int" "message ID")
        (carg "channel" "channel to broadcast to")
    }}

    {{ $channel := ($args.Get 0).ID }}
    {{ $msgId := $args.Get 1 }}
    {{ $broadcastChannel := ($args.Get 2).ID }}

    {{ execCC $extractCmd nil 0 (sdict
        "channel" $channel
        "id" $msgId
        "caller" $thisCmd
        "args" (sdict "broadcastChannel" $broadcastChannel)
    ) }}
{{ end }}

{{ if .ExecData }}
    {{ $broadcastChannel := .ExecData.args.broadcastChannel }}
    {{ $extract := .ExecData.extract }}
    {{ $footerText := "Message ID:" }}

    {{ $pingListName := "Asked By" }}
    {{ $pingList := "" }}
    {{ range $element := $extract.fields }}
        {{ if eq (toString $element.Name) $pingListName }}
            {{ $pingList = $element.Value }}
        {{ end }}
    {{ end }}

    {{/* $msg := (index (getMessage $channel $msgId).Embeds 0) */}}
    {{/* $broadcastID := sendMessageRetID $broadcastChannel $msg */}}

    {{ $broadcastID := sendMessageRetID $broadcastChannel $pingList }}

    {{ $embed := cembed
        "title" $extract.title
        "description" $extract.description
        "footer" (sdict "text" (joinStr " " $footerText $broadcastID))
    }}

    {{ editMessage $broadcastChannel $broadcastID $embed }}
{{ end }}
